{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/nikola/Desktop/react-first-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"/Users/nikola/Desktop/react-first-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar TEMPLATE_REGEX = /(?:\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nvar STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nvar STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nvar ESCAPE_REGEX = /\\\\(u(?:[a-f\\d]{4}|{[a-f\\d]{1,6}})|x[a-f\\d]{2}|.)|([^\\\\])/gi;\nvar ESCAPES = new Map([['n', '\\n'], ['r', '\\r'], ['t', '\\t'], ['b', '\\b'], ['f', '\\f'], ['v', '\\v'], ['0', '\\0'], ['\\\\', '\\\\'], ['e', \"\\x1B\"], ['a', \"\\x07\"]]);\nfunction unescape(c) {\n  var u = c[0] === 'u';\n  var bracket = c[1] === '{';\n  if (u && !bracket && c.length === 5 || c[0] === 'x' && c.length === 3) {\n    return String.fromCharCode(parseInt(c.slice(1), 16));\n  }\n  if (u && bracket) {\n    return String.fromCodePoint(parseInt(c.slice(2, -1), 16));\n  }\n  return ESCAPES.get(c) || c;\n}\nfunction parseArguments(name, arguments_) {\n  var results = [];\n  var chunks = arguments_.trim().split(/\\s*,\\s*/g);\n  var matches;\n  var _iterator = _createForOfIteratorHelper(chunks),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var chunk = _step.value;\n      var number = Number(chunk);\n      if (!Number.isNaN(number)) {\n        results.push(number);\n      } else if (matches = chunk.match(STRING_REGEX)) {\n        results.push(matches[2].replace(ESCAPE_REGEX, function (m, escape, character) {\n          return escape ? unescape(escape) : character;\n        }));\n      } else {\n        throw new Error(\"Invalid Chalk template style argument: \".concat(chunk, \" (in style '\").concat(name, \"')\"));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return results;\n}\nfunction parseStyle(style) {\n  STYLE_REGEX.lastIndex = 0;\n  var results = [];\n  var matches;\n  while ((matches = STYLE_REGEX.exec(style)) !== null) {\n    var name = matches[1];\n    if (matches[2]) {\n      var args = parseArguments(name, matches[2]);\n      results.push([name].concat(args));\n    } else {\n      results.push([name]);\n    }\n  }\n  return results;\n}\nfunction buildStyle(chalk, styles) {\n  var enabled = {};\n  var _iterator2 = _createForOfIteratorHelper(styles),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var layer = _step2.value;\n      var _iterator3 = _createForOfIteratorHelper(layer.styles),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var style = _step3.value;\n          enabled[style[0]] = layer.inverse ? null : style.slice(1);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var current = chalk;\n  for (var _i = 0, _Object$entries = Object.entries(enabled); _i < _Object$entries.length; _i++) {\n    var _current;\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      styleName = _Object$entries$_i[0],\n      _styles = _Object$entries$_i[1];\n    if (!Array.isArray(_styles)) {\n      continue;\n    }\n    if (!(styleName in current)) {\n      throw new Error(\"Unknown Chalk style: \".concat(styleName));\n    }\n    current = _styles.length > 0 ? (_current = current)[styleName].apply(_current, _toConsumableArray(_styles)) : current[styleName];\n  }\n  return current;\n}\nmodule.exports = function (chalk, temporary) {\n  var styles = [];\n  var chunks = [];\n  var chunk = [];\n\n  // eslint-disable-next-line max-params\n  temporary.replace(TEMPLATE_REGEX, function (m, escapeCharacter, inverse, style, close, character) {\n    if (escapeCharacter) {\n      chunk.push(unescape(escapeCharacter));\n    } else if (style) {\n      var string = chunk.join('');\n      chunk = [];\n      chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));\n      styles.push({\n        inverse: inverse,\n        styles: parseStyle(style)\n      });\n    } else if (close) {\n      if (styles.length === 0) {\n        throw new Error('Found extraneous } in Chalk template literal');\n      }\n      chunks.push(buildStyle(chalk, styles)(chunk.join('')));\n      chunk = [];\n      styles.pop();\n    } else {\n      chunk.push(character);\n    }\n  });\n  chunks.push(chunk.join(''));\n  if (styles.length > 0) {\n    var errMessage = \"Chalk template literal is missing \".concat(styles.length, \" closing bracket\").concat(styles.length === 1 ? '' : 's', \" (`}`)\");\n    throw new Error(errMessage);\n  }\n  return chunks.join('');\n};","map":null,"metadata":{},"sourceType":"script"}